@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using BrightInvest.Application.DTOs.Assets
@using BrightInvest.Application.Services.Excel
@using BrightInvest.Web.Services

@inject CustomHttpClientService CustomHttpClientService
@inject ExcelService ExcelService
@inject ISnackbar Snackbar

<div class="d-flex flex-column" style="max-width: 400px; margin: 0 auto; padding: 20px;">
    <MudText Typo="Typo.h6" Class="mb-2">Upload Excel File</MudText>
    <MudItem>
        <InputFile OnChange="HandleFileUpload" accept=".xlsx" Class="mb-3" />
    </MudItem>
    <MudItem>
        <MudButton OnClick="ProcessFile" Disabled="@(_selectedFile == null)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Upload" >
            Process File
        </MudButton>
    </MudItem>
    @if (_isProcessing)
    {
        <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Large" Class="mt-3" />
    }
</div>



@code {
    private IBrowserFile _selectedFile;
    private bool _isProcessing = false;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            _selectedFile = file;
        }
    }

    private async Task ProcessFile()
    {
        if (_selectedFile == null)
            return;

        _isProcessing = true;

        await using var stream = _selectedFile.OpenReadStream();
        var assetsCreateDto = await ExcelService.ReadAssetsFromExcelAsync(stream);

        var httpClient = CustomHttpClientService.GetHttpClient();
        var response = await httpClient.PostAsJsonAsync("api/assets/bulk-add", assetsCreateDto);


        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<AssetsCreateResponseDto>();
            if (responseData?.Errors != null && responseData.Errors.Any())
            {
                // Display all the validation errors
                var errorMessages = string.Join("\n", responseData.Errors);
                Snackbar.Add($"Errors occurred while adding assets:\n{errorMessages}", Severity.Error);
            }
            else
            {
                Snackbar.Add("Assets added successfully!", Severity.Success);
            }
        }
        else
        {
            // Display the general failure message if response is not successful
            Snackbar.Add($"Failed to update asset: {response.ReasonPhrase}", Severity.Error);
        }


        _isProcessing = false;
        StateHasChanged();
    }
}