@page "/assets/{id}"
@using BrightInvest.Application.DTOs.AssetPrices
@using BrightInvest.Web.Components
@using BrightInvest.Web.Services
@inject NavigationManager Navigation
@inject CustomHttpClientService CustomHttpClientService
@inject ISnackbar Snackbar

<PageTitle>Asset</PageTitle>


@if (asset != null){

    <div class="d-flex flex-row justify-space-between align-center  w-100" style="width:81%;">
        <MudText Typo = "Typo.h2">@asset.Name (@asset.Ticker)</MudText>
        <div class="d-flex gap-3 align-items-center">
            <MudButton Variant = "Variant.Filled" Color="MudColor.Success" Style="width: 120px; height: 40px;">Buy</MudButton>
            <MudButton Variant = "Variant.Filled" Color="MudColor.Error" Style="width: 120px; height: 40px;">Sell</MudButton>
        </div>
    </div>
    <MudText Typo="Typo.h3" Class="pb-3">@lastPrice.ClosePrice @asset.Currency</MudText>

    <div class="d-flex gap-3 justify-content-start w-100">
        <AssetPriceChart AssetId="asset.Id" OnHorizonChanged="@UpdateHorizon"/>
        <AssetMetrics AssetId="asset.Id" Horizon=@horizon />
    </div>
}
else
{
    <MudText Typo="Typo.body1">Loading data...</MudText>
}

@code {
    [Parameter]
    public string id { get; set; }


    private AssetDto asset;
    private List<AssetPriceDto> assetPrices;
    private AssetPriceDto lastPrice;
    private string horizon = "Max";

    protected override async Task OnInitializedAsync()
    {
        await GetAsset(Guid.Parse(id));
        await GetAssetPrices(Guid.Parse(id));
    }

    protected async Task GetAsset(Guid id)
    {
        var httpClient = CustomHttpClientService.GetHttpClient();
        asset = await httpClient.GetFromJsonAsync<AssetDto>($"api/assets/{id}");
    }

    private async Task GetAssetPrices(Guid assetId)
    {
        var httpClient = CustomHttpClientService.GetHttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/asset-prices/asset-id/{assetId}");
        var response = await httpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode){
            var errorContent = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            string errorMessage = errorContent?.GetValueOrDefault("message") ?? "Unknown error";
            Snackbar.Add($"Failed to fetch prices: {errorMessage}", Severity.Error);
            return;
        }else{
            assetPrices = await response.Content.ReadFromJsonAsync<List<AssetPriceDto>>();
            lastPrice = assetPrices.Last();
        }    
    }

    private void UpdateHorizon(string newHorizon){
        horizon = newHorizon;
    }
}
