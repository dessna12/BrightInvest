@page "/assets"
@using BrightInvest.Application.DTOs.Currency
@using BrightInvest.Domain.Entities
@using BrightInvest.Domain.Enum
@using BrightInvest.Infrastructure.DataBase
@using BrightInvest.Web.Components
@using BrightInvest.Web.Services
@using BrightInvest.Web.Shared.Dialog
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject CustomHttpClientService CustomHttpClientService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Assets</PageTitle>

<MudText Typo="Typo.h2">Assets</MudText>



    <MudText Typo="Typo.h4">Add New Asset</MudText>
    <MudGrid Spacing="2" AlignItems="center" Class="p-4">
        <!-- Left Section (Form) - Takes 2/3 width -->
        <MudItem xs="12" sm="8">
            <MudGrid Spacing="2">
                <!-- Ticker and Name Fields -->
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Ticker" @bind-Value="newAsset.Ticker" Required FullWidth />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Name" @bind-Value="newAsset.Name" Required FullWidth />
                </MudItem>

                <!-- Currency Field -->
                <MudItem xs="12" sm="4">
                    <MudSelect @bind-Value="newAsset.Currency" Label="Currency" FullWidth>
                        @foreach (var currency in Enum.GetValues<Currency>().Select(e => e.ToString()))
                        {
                            <MudSelectItem Value="@currency">@currency</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Country and Sector Fields on the same row -->
                <MudItem xs="12" sm="4">
                    <MudSelect @bind-Value="newAsset.Country" Label="Country" FullWidth>
                        @foreach (var country in Enum.GetValues<Country>().Select(e => e.ToString()))
                        {
                            <MudSelectItem Value="@country">@country</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudSelect @bind-Value="newAsset.Sector" Label="Sector" FullWidth>
                        @foreach (var sector in Enum.GetValues<Sector>().Select(e => e.ToString()))
                        {
                            <MudSelectItem Value="@sector">@sector</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Add Asset Button -->
                <MudItem xs="12" sm="12" Class="d-flex align-center mt-2">
                    <MudButton OnClick="AddAsset" Variant="Variant.Filled" Color="MudColor.Primary">
                        Add Asset
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Right Section (Excel Upload) - Takes 1/3 width -->
        <MudItem xs="12" sm="4">
            <ExcelUploadComponent />
        </MudItem>
    </MudGrid>


<MudText Typo="Typo.h4" Class="mt-2 mb-3">All Assets</MudText>

@if (assets == null || assets.Count == 0)
{
    <MudText>Loading...</MudText>
}
else if (!assets.Any())
{
    <MudText>No assets found.</MudText>
}
else
{
    <MudTable Items="@assets" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent >
            <MudTh Style="font-weight:bold">Ticker</MudTh>
            <MudTh Style="font-weight:bold">Name</MudTh>
            <MudTh Style="font-weight:bold">Currency</MudTh>
            <MudTh Style="font-weight:bold">Country</MudTh>
            <MudTh Style="font-weight:bold">Sector</MudTh>
            <MudTh Style="font-weight:bold">Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="asset" >
            @* <MudTd DataLabel="Asset ID">@asset.Id</MudTd> *@
            @* <MudTd DataLabel="Ticker">@asset.Ticker</MudTd> *@
            @* <MudTd DataLabel="Name">@asset.Name</MudTd> *@


            <MudTd DataLabel="Ticker">
                @if (editingAssetId == asset.Id && editableAsset != null){
                    <MudTextField @bind-Value="editableAsset.Ticker" Immediate="true" />
                }
                else{
                    <MudText>@asset.Ticker</MudText>
                }
            </MudTd>

            <MudTd DataLabel="Name">
                @if (editingAssetId == asset.Id && editableAsset !=null)
                {
                    <MudTextField @bind-Value="editableAsset.Name" Immediate="true" />
                }
                else
                {
                    <MudLink Href="@($"/assets/{asset.Id}")"><MudText>@asset.Name</MudText></MudLink>
                }
            </MudTd>

            <MudTd DataLabel="Currency"> 
                @if (editingAssetId == asset.Id && editableAsset != null) 
                { 
                    <MudSelect @bind-Value="editableAsset.Currency"> 
                        @foreach (var currency in Enum.GetValues<Currency>().Select(e => e.ToString())) 
                    { 
                        <MudSelectItem Value="@currency">@currency</MudSelectItem> 
                    } 
                </MudSelect> 
                } 
                else 
                { 
                    <MudText>@asset.Currency</MudText> 
                } 
            </MudTd>

            <MudTd DataLabel="Country">
                @if (editingAssetId == asset.Id && editableAsset != null)
                {
                    <MudSelect @bind-Value="editableAsset.Country">
                        @foreach (var country in Enum.GetValues<Country>().Select(e => e.ToString()))
                    {
                        <MudSelectItem Value="@country">@country</MudSelectItem>
                    }
                </MudSelect>
                }
                else
                {
                    <MudText>@asset.Country</MudText>
                }
            </MudTd>

            <MudTd DataLabel="Sector">
                @if (editingAssetId == asset.Id && editableAsset != null)
                {
                    <MudSelect @bind-Value="editableAsset.Sector">
                        @foreach (var sector in Enum.GetValues<Sector>().Select(e => e.ToString()))
                    {
                        <MudSelectItem Value="@sector">@sector</MudSelectItem>
                    }
                </MudSelect>
                }
                else
                {
                    <MudText>@asset.Sector</MudText>
                }
            </MudTd>


            <MudTd DataLabel="Actions">
                @if (editingAssetId == asset.Id)
                {
                    <MudButton OnClick="SaveAsset" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Save">
                        Save
                    </MudButton>
                    <MudButton OnClick="CancelEdit" Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Cancel">
                        Cancel
                    </MudButton>
                }
                else
                {
                    <MudIconButton OnClick="() => StartEdit(asset)" Color="MudBlazor.Color.Primary" Icon="@Icons.Material.Filled.Edit" />
                    <MudIconButton OnClick="@((e) => OpenDeleteDialogAsync(asset))" Icon="@Icons.Material.Filled.Delete" Color="MudBlazor.Color.Error" />
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
            RowsPerPageString="@rowsPerPageString"
            InfoFormat="@infoFormat"
            AllItemsText="@allItemsText"
            HorizontalAlignment="@horizontalAlignment"
            HideRowsPerPage="@hideRowsPerPage"
            HidePageNumber="@hidePageNumber"
            HidePagination=false />
        </PagerContent>
    </MudTable>
}


@code {

    //TO DO : Factorize in a clean Architecture
    private List<AssetDto> assets = new();
    private AssetCreateDto newAsset = new AssetCreateDto("","", "USD", "UnitedStates", "");
    private List<CurrencyDto> currencies = new();
    private Guid? editingAssetId = null;
    private AssetUpdateDto? editableAsset;
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";



    protected override async Task OnInitializedAsync()
    {
        await GetAssets();
        await LoadCurrencies();
    }

    protected async Task GetAssets() {
        var httpClient = CustomHttpClientService.GetHttpClient();
        assets = await httpClient.GetFromJsonAsync<List<AssetDto>>("api/assets");
    }

    private async Task LoadCurrencies()
    {
        var httpClient = CustomHttpClientService.GetHttpClient();
        currencies = await httpClient.GetFromJsonAsync<List<CurrencyDto>>("api/currencies");
    }

    protected async Task AddAsset() {
        var httpClient = CustomHttpClientService.GetHttpClient();
        var response = await httpClient.PostAsJsonAsync("api/assets", newAsset); 

        if (response.IsSuccessStatusCode)
        {
            var createdAsset = await response.Content.ReadFromJsonAsync<AssetDto>(); 
            newAsset = new AssetCreateDto("", "", "USD", "UnitedStates", "");
            await GetAssets();
        }
        else
        {
            Snackbar.Add($"Failed to add asset: {response.Content.ReadAsStringAsync()}", Severity.Error);
        }
    }

    protected async Task DeleteAsset(Guid assetId) {
        var httpClient = CustomHttpClientService.GetHttpClient();
        var response = await httpClient.DeleteAsync($"api/assets/{assetId}");

        if (response.IsSuccessStatusCode)
        {
            await GetAssets();
            Snackbar.Add("Item successfully deleted", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to add asset", Severity.Error);
        }
    }

    private async Task OpenDeleteDialogAsync(AssetDto asset)
    {
        var parameters = new DialogParameters<DeleteDialog> {
            { x => x.ContentText, $"Are you sure you want to delete the asset {asset.Name}?" },
            { x => x.ButtonText, "Delete" },
            { nameof(DeleteDialog.Color), MudColor.Error },
        };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Asset", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteAsset(asset.Id);
        }
    }

    private void StartEdit(AssetDto asset)
    {
        editableAsset = new AssetUpdateDto(asset.Id, asset.Ticker, asset.Name, asset.Currency, asset.Country, asset.Sector);
        editingAssetId = asset.Id;
    }

    private void CancelEdit()
    {
        editableAsset = null;
        editingAssetId = null;
    }

    private async Task SaveAsset()
    {
        if (editableAsset == null || editingAssetId == null)
            return;

        var httpClient = CustomHttpClientService.GetHttpClient();
        var response = await httpClient.PutAsJsonAsync($"api/assets/{editingAssetId}", editableAsset);
        if (response.IsSuccessStatusCode)
        {
            await GetAssets();
            Snackbar.Add("Asset updated successfully!", Severity.Success);    
        }
        else
        {
            Snackbar.Add("Failed to update asset.", Severity.Error);
        }
        CancelEdit();
    }


}
