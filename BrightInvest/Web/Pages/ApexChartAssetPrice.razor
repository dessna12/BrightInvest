@page "/apex-charts-asset"
@using BrightInvest.Application.DTOs.AssetPrices
@using BrightInvest.Application.DTOs.Currency
@using BrightInvest.Domain.Entities
@using BrightInvest.Domain.Enum
@using BrightInvest.Infrastructure.DataBase
@using BrightInvest.Web.Services
@using BrightInvest.Web.Shared.Dialog
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject CustomHttpClientService CustomHttpClientService

@using ApexCharts

@if (assetPrices == null || !assetPrices.Any())
{
    <p>No data available for the chart.</p>
}
else
{
    <MudPaper Elevation="4" Style="height: 50vh; width:50%; justify-content: center; align-items: center;">
        <ApexChart TItem="AssetPriceDto" 
        Title="@chartTitle"
        Options="options"
        Width="@("100%")"
        Height="@("100%")"
        >
            <ApexPointSeries TItem="AssetPriceDto"
            Items="assetPrices"
            SeriesType="@SeriesType.Area"
            Name="Close Price"
            XValue="@(ap => ap.Date.ToString("dd-MMM"))"
            YValue="@(ap => ap.ClosePrice)"/>
            @* OrderBy="e=>e.X" /> *@
            @* XValue="@(ap => ap.Date)" *@

        </ApexChart>
    </MudPaper>
}

@code {
    private string symbol = "GOOGL";
    private List<AssetPriceDto> assetPrices = new();
    private List<AssetPriceDto> displayedAssetPrices = new();
    private ApexChartOptions<AssetPriceDto> options = new ApexCharts.ApexChartOptions<AssetPriceDto>();
    private string chartTitle;

    protected override async Task OnInitializedAsync()
    {
        await FetchPrices();

        // Group by Year & Month and select the first entry of each month
        // groupedPrices = assetPrices
        //     .GroupBy(ap => new { ap.Date.Year, ap.Date.Month })
        //     .Select(g => g.OrderBy(ap => ap.Date).First())
        //     .ToList();
        assetPrices = assetPrices.OrderBy(ap => ap.Date).ToList();
        chartTitle = $"{symbol} Asset Price over time";

        StateHasChanged();
    }

    private async Task FetchPrices()
    {
        if (string.IsNullOrWhiteSpace(symbol)) return;

        try
        {
            var httpClient = CustomHttpClientService.GetHttpClient();
            assetPrices = await httpClient.GetFromJsonAsync<List<AssetPriceDto>>($"api/asset-prices/ticker/{symbol}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prices: {ex.Message}");
            DateTime dd = DateTime.UtcNow.Date;
            Console.WriteLine(dd.Month.ToString());
        }
    }
}
